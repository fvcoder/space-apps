generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model participant {
  id      String  @id @default(cuid())
  code    String?
  name    String
  image   String?
  type    String
  package String

  dinner    Json @default("{}")
  breakfast Json @default("{}")
  launch1   Json @default("{}")
  launch2   Json @default("{}")
  extra     Json @default("{}")

  codeDate DateTime?

  createAt DateTime @default(now())
  updateAt DateTime @default(now()) @updatedAt

  @@map("participant")
}

model p {
  id       String    @id @default(cuid())
  code     String?
  codeDate DateTime?
  name     String
  type     String
  package  String
  ci       String

  items pItem[]

  createAt DateTime @default(now())
  updateAt DateTime @default(now()) @updatedAt

  @@map("p")
}

model pItem {
  id   String  @id
  type String
  name String?
  p    p       @relation(fields: [pId], references: [id], onDelete: Cascade)
  pId  String

  deliveredDate   DateTime?
  deliveredUserId String?
}
